"""
Test a Ranked Pairs case where two source nodes are found in the graph.
For this test case we ought to return a tie. 
"""
# -*- coding: utf-8 -*-
import re
from ast import literal_eval

import numpy as np
import votesim
from votesim.models import spatial
from votesim.votemethods.condorcet import ranked_pairs

def test3():
    a = """[[ 1  7  2  9  6  3  5 13  4 12  8 10 11  0]
    [ 4  7  5  9  3  6  2 13  1 12  8 10 11  0]
    [ 6  1  4  5  9  3  8 13  7 12  2 10 11  0]
    [ 6  3  5  1  9  4  8 13  7 12  2 10 11  0]
    [ 7 12  9  0  1 10  2  8  4  6 13  3  5 11]
    [ 1  7  3  9  6  4  5 13  2 12  8 10 11  0]
    [ 7 12  9  0  1 10  2  8  4  6 13  3  5 11]
    [ 2  7  3  9  6  4  5 13  1 12  8 10 11  0]
    [ 4 11  5  0  2  6  1 10  3  9 12  7  8 13]
    [ 4 12  5  0  1  6  2 10  3  9 13  7  8 11]
    [ 4 12  6  0  1  7  2 10  3  9 13  5  8 11]
    [ 4 12  5  0  1  6  2 10  3  9 13  7  8 11]
    [ 6  3  5  1  9  4  8 13  7 12  2 10 11  0]
    [ 9 12 10  0  6 11  7  4  8  3 13  1  2  5]
    [ 3  4  2  6  9  1  8 13  7 12  5 10 11  0]
    [ 9 12 10  0  1 11  3  6  7  5 13  2  4  8]
    [ 1  7  3  9  6  4  5 13  2 12  8 10 11  0]
    [ 3  4  2  7  9  1  8 13  6 12  5 10 11  0]
    [ 4 11  5 13  2  6  1 10  3  9 12  7  8  0]
    [ 6  3  5  1  9  4  8 13  7 12  2 10 11  0]
    [ 4 12  5  0  1  6  2 10  3  9 13  7  8 11]
    [ 6  3  5  1  9  4  8 13  7 12  2 10 11  0]
    [ 4 12  5  0  1  6  2 10  3  9 13  7  8 11]
    [ 6  1  5  3  9  4  8 13  7 12  2 10 11  0]
    [ 2  7  3  9  6  5  4 13  1 12  8 10 11  0]
    [ 4 11  5 13  2  6  1 10  3  9 12  7  8  0]
    [ 6  3  5  1  9  4  8 13  7 12  2 10 11  0]
    [ 6  1  5  3  9  4  8 13  7 12  2 10 11  0]
    [ 2  7  3  9  6  4  5 13  1 12  8 10 11  0]
    [ 6  2  5  3  9  4  8 13  7 12  1 10 11  0]
    [ 2  7  4  9  6  5  3 13  1 12  8 10 11  0]
    [ 6  1  5  3  9  4  8 13  7 12  2 10 11  0]
    [ 1  7  2  9  6  3  5 13  4 12  8 10 11  0]
    [ 4 12  5  0  1  6  2 10  3  9 13  7  8 11]
    [ 6  3  5  1  9  4  8 13  7 12  2 10 11  0]
    [ 3  4  2  7  9  1  8 13  6 12  5 10 11  0]
    [ 6  1  4  5  9  3  8 13  7 12  2 10 11  0]
    [ 6  1  4  5  9  3  8 13  7 12  2 10 11  0]
    [ 3  5  2  7  9  1  8 13  4 12  6 10 11  0]
    [ 3  6  1  9  8  2  5 13  4 12  7 10 11  0]
    [ 6  1  5  3  9  4  8 13  7 12  2 10 11  0]
    [ 4  7  5 10  3  6  2 13  1 12  8  9 11  0]
    [ 6  3  5  1  9  4  8 13  7 12  2 10 11  0]
    [ 6  3  5  1  9  4  8 13  7 12  2 10 11  0]
    [ 6  3  5  1  9  4  8 13  7 12  2 10 11  0]
    [ 8 12  9  0  1 10  2  7  4  6 13  3  5 11]
    [ 4 12  5  0  1  6  2 10  3  9 13  7  8 11]
    [ 9 12 10  0  6 11  7  4  8  3 13  1  2  5]
    [ 6  1  5  3  9  4  8 13  7 12  2 10 11  0]
    [ 3  5  2  8  9  1  7 13  4 12  6 10 11  0]
    [ 4  7  5  9  3  6  2 13  1 12  8 10 11  0]
    [ 3  4  2  7  9  1  8 13  6 12  5 10 11  0]
    [ 6  3  5  1  9  4  8 13  7 12  2 10 11  0]
    [ 9 12 10  0  6 11  7  1  8  2 13  5  3  4]
    [ 1  7  2  9  6  3  5 13  4 12  8 10 11  0]
    [ 4 11  5  0  2  6  1 10  3  9 12  7  8 13]
    [ 6  1  5  3  9  4  8 13  7 12  2 10 11  0]
    [ 4  8  5 11  2  6  1 13  3 12  9  7 10  0]
    [ 4 12  5  0  1  6  2 10  3  9 13  7  8 11]
    [ 4 11  5 13  2  6  1 10  3  9 12  7  8  0]
    [ 9 12 10  0  2 11  3  6  7  5 13  1  4  8]
    [ 4  8  5 10  3  6  2 13  1 12  9  7 11  0]
    [ 4  8  5 10  3  6  1 13  2 12  9  7 11  0]
    [ 6  1  5  3  9  4  8 13  7 12  2 10 11  0]
    [ 5 12  6  0  1  7  2 10  3  9 13  4  8 11]
    [ 4 12  5  0  1  6  2 10  3  9 13  7  8 11]
    [ 8 12 10  0  1 11  2  7  4  6 13  3  5  9]
    [ 4 11  5  0  2  6  1 10  3  9 12  7  8 13]
    [ 6  1  5  3  9  4  8 13  7 12  2 10 11  0]
    [ 2  7  3  9  6  4  5 13  1 12  8 10 11  0]
    [ 2  7  3  9  6  4  5 13  1 12  8 10 11  0]
    [ 1  7  2  9  6  3  5 13  4 12  8 10 11  0]
    [ 2  7  3  9  6  4  5 13  1 12  8 10 11  0]
    [ 2  7  3  9  6  4  5 13  1 12  8 10 11  0]
    [ 6  1  4  5  9  3  8 13  7 12  2 10 11  0]
    [ 4 11  5  0  2  6  1 10  3  9 12  7  8 13]
    [ 6  1  4  5  9  3  8 13  7 12  2 10 11  0]
    [ 4  7  5  9  3  6  2 13  1 12  8 10 11  0]
    [ 6  3  5  1  9  4  8 13  7 12  2 10 11  0]
    [ 4 11  5 13  2  6  1 10  3  9 12  7  8  0]
    [ 4 12  5  0  1  6  2 10  3  9 13  7  8 11]
    [ 6  3  5  1  9  4  8 13  7 12  2 10 11  0]
    [ 4 12  6  0  1  7  2 10  3  9 13  5  8 11]
    [ 4 11  5  0  2  6  1 10  3  9 12  7  8 13]
    [ 1  7  2  9  6  3  5 13  4 12  8 10 11  0]
    [ 6  1  4  5  9  3  8 13  7 12  2 10 11  0]
    [ 1  7  3  9  6  4  5 13  2 12  8 10 11  0]
    [ 4 11  5 13  2  6  1 10  3  9 12  7  8  0]
    [ 3  7  5  9  4  6  2 13  1 12  8 10 11  0]
    [ 4 11  5 13  2  6  1 10  3  9 12  7  8  0]
    [ 4 12  5  0  1  6  2 10  3  9 13  7  8 11]
    [ 3  4  2  7  9  1  8 13  6 12  5 10 11  0]
    [ 3  5  2  7  9  1  8 13  4 12  6 10 11  0]
    [ 4  7  5  9  3  6  2 13  1 12  8 10 11  0]
    [ 3  4  2  6  9  1  8 13  7 12  5 10 11  0]
    [ 9 12 10  0  5 11  7  4  8  3 13  1  2  6]
    [ 2  7  3  9  6  4  5 13  1 12  8 10 11  0]
    [ 6  1  4  5  9  3  8 13  7 12  2 10 11  0]
    [ 4 11  5 13  2  6  1 10  3  9 12  7  8  0]
    [ 1  7  2  9  6  3  5 13  4 12  8 10 11  0]]"""
    
    #
    a = a.replace('[ ', '[')
    a = re.sub('\s+', ',', a)
    a = np.array(literal_eval(a))
    
    
    
    w,t,o = ranked_pairs(a)
    assert 8 in w
    
    pairs = o['pairs']
#c = _CycleDetector(pairs[0:12])
#
#
#
#
#cf = c.any_circuits()
#
#


