"""
Test a Ranked Pairs case where two source nodes are found in the graph.
For this test case we ought to return a tie. 
"""
# -*- coding: utf-8 -*-
import re
from ast import literal_eval

import numpy as np
import votesim
from votesim.models import spatial
from votesim.votemethods.condorcet import ranked_pairs
import votesim.votemethods.condcalcs as condcalcs

def test4():
    a = """6	5	7	4	8	1	0	2	10	11	3	9
    7	1	8	2	5	4	0	3	10	11	6	9
    1	8	2	7	0	5	11	6	9	10	3	4
    6	11	5	10	0	8	1	9	3	2	7	4
    7	2	8	3	1	5	0	4	10	11	6	9
    7	2	8	1	6	4	0	3	10	11	5	9
    7	2	8	3	1	5	0	4	10	11	6	9
    7	1	8	2	6	4	0	3	10	11	5	9
    7	2	8	3	1	5	0	4	10	11	6	9
    7	2	8	3	1	5	0	4	10	11	6	9
    7	2	8	3	1	5	0	4	10	11	6	9
    7	2	8	3	1	5	0	4	10	11	6	9
    5	11	4	10	0	8	6	9	1	2	7	3
    7	2	8	3	1	5	0	4	10	11	6	9
    2	7	3	6	11	4	0	5	9	10	1	8
    7	2	8	3	1	5	0	4	10	11	6	9
    7	1	8	2	6	4	0	3	10	11	5	9
    4	7	5	6	11	2	0	3	9	10	1	8
    7	2	8	3	1	5	0	4	10	11	6	9
    4	11	3	10	0	8	6	9	2	5	7	1
    7	2	8	3	1	5	0	4	10	11	6	9
    6	11	5	10	0	8	2	9	3	1	7	4
    7	2	8	3	1	5	0	4	10	11	6	9
    1	9	2	8	0	5	11	6	7	10	4	3
    7	1	8	2	6	4	0	3	10	11	5	9
    7	2	8	3	1	5	0	4	10	11	6	9
    6	11	5	10	0	8	1	9	3	2	7	4
    1	10	2	9	0	7	11	8	4	6	5	3
    7	1	8	2	6	4	0	3	10	11	5	9
    3	11	2	10	0	8	7	9	4	5	6	1
    7	1	8	2	6	4	0	3	10	11	5	9
    1	9	2	8	0	5	11	6	7	10	4	3
    7	3	8	1	6	4	0	2	10	11	5	9
    7	2	8	3	1	5	0	4	10	11	6	9
    5	11	4	10	0	8	6	9	1	2	7	3
    4	7	6	5	11	2	0	3	9	10	1	8
    1	8	2	7	0	5	11	6	9	10	3	4
    1	8	2	7	0	5	11	6	9	10	3	4
    6	5	7	4	11	2	0	3	9	10	1	8
    6	5	7	4	8	2	0	3	10	11	1	9
    1	9	2	8	0	5	11	6	7	10	4	3
    7	1	8	2	3	5	0	4	10	11	6	9
    5	11	4	10	0	8	6	9	1	2	7	3
    6	11	5	10	0	8	1	9	3	2	7	4
    5	11	4	10	0	8	6	9	1	3	7	2
    7	2	8	3	1	5	0	4	10	11	6	9
    7	2	8	3	1	5	0	4	10	11	6	9
    7	2	8	3	1	5	0	4	10	11	6	9
    1	10	2	8	0	5	11	7	6	9	4	3
    6	5	7	4	9	2	0	3	10	11	1	8
    7	1	8	2	5	4	0	3	10	11	6	9
    4	7	5	6	11	2	0	3	9	10	1	8
    4	11	2	10	0	8	6	9	3	5	7	1
    7	2	8	3	1	5	0	4	10	11	6	9
    7	3	8	1	6	4	0	2	10	11	5	9
    7	2	8	3	1	5	0	4	10	11	6	9
    1	9	2	8	0	5	11	6	7	10	4	3
    7	2	8	3	1	5	0	4	10	11	6	9
    7	2	8	3	1	5	0	4	10	11	6	9
    7	2	8	3	1	5	0	4	10	11	6	9
    7	2	8	3	1	5	0	4	10	11	6	9
    7	1	8	3	2	5	0	4	10	11	6	9
    7	2	8	3	1	5	0	4	10	11	6	9
    2	10	1	9	0	7	11	8	4	5	6	3
    7	2	8	3	1	5	0	4	10	11	6	9
    7	2	8	3	1	5	0	4	10	11	6	9
    7	2	8	3	1	5	0	4	10	11	6	9
    7	2	8	3	1	5	0	4	10	11	6	9
    2	10	1	9	0	7	11	8	4	5	6	3
    7	1	8	2	6	4	0	3	10	11	5	9
    7	1	8	2	6	4	0	3	10	11	5	9
    7	3	8	1	6	4	0	2	10	11	5	9
    7	1	8	2	6	4	0	3	10	11	5	9
    7	1	8	2	6	4	0	3	10	11	5	9
    1	8	2	7	0	5	11	6	9	10	3	4
    7	2	8	3	1	5	0	4	10	11	6	9
    1	8	2	7	0	5	11	6	9	10	3	4
    7	1	8	2	4	5	0	3	10	11	6	9
    6	11	5	10	0	8	4	9	2	1	7	3
    7	2	8	3	1	5	0	4	10	11	6	9
    7	2	8	3	1	5	0	4	10	11	6	9
    6	11	5	10	0	8	3	9	2	1	7	4
    7	2	8	3	1	5	0	4	10	11	6	9
    7	2	8	3	1	5	0	4	10	11	6	9
    6	5	7	4	8	1	0	2	10	11	3	9
    1	8	2	7	0	5	11	6	9	10	3	4
    7	2	8	1	6	4	0	3	10	11	5	9
    7	2	8	3	1	5	0	4	10	11	6	9
    7	1	8	2	5	4	0	3	10	11	6	9
    7	2	8	3	1	5	0	4	10	11	6	9
    7	2	8	3	1	5	0	4	10	11	6	9
    4	7	5	6	11	2	0	3	9	10	1	8
    6	5	7	4	10	2	0	3	9	11	1	8
    7	1	8	2	5	4	0	3	10	11	6	9
    1	8	2	6	11	4	0	5	9	10	3	7
    7	2	8	3	1	5	0	4	10	11	6	9
    7	1	8	2	6	4	0	3	10	11	5	9
    1	8	2	7	0	5	11	6	9	10	3	4
    7	2	8	3	1	5	0	4	10	11	6	9
    6	5	7	4	8	1	0	2	10	11	3	9"""
    #
    a1 = a.split('\n')
    a2 = [ai.split() for ai in a1]
    a = np.array(a2, dtype=int)
    
    w,t,o = ranked_pairs(a)
    w2 = condcalcs.condorcet_check_one(a)
    assert w2 in w

#pairs = o['pairs']
#c = _CycleDetector(pairs[0:12])
#
#
#
#
#cf = c.any_circuits()




